---
description: 
globs: *.tsx
alwaysApply: false
---
이 룰은 모든 어떤 룰보다 우선시 되어야 합니다.

타입스크립트와 리액트 코드를 생성해야 합니다.

[컴포넌트 주석]

컴포넌트 내에 주석을 달고 각 주석 아래에 hook 을 위치 시킨다.
해당 항목이 없더라도(예를 들어 prop이 없더라도) 주석은 그대로 유지한다. 그래야 코드에 통일성이 생긴다.

```tsx
function TestComponent(props: { example: string}) {
// prop destruction
const { example } = props;

// lib hooks

// state, ref, querystring hooks

// form hooks

// query hooks

// calculated values

// effects

// handlers

return (
...jsx elements
)
}
```

[Props를 위한 타입 분리 금지]

-   Props를 위한 Type Alias 또는 Interface를 추가 정의하지 않는다.

```tsx
function TestComponent(props: {
    type: {
        a: string;
        b: number;
    };
    example: string;
}) {
    // prop destruction
    const { type, example } = props;
    // lib hooks

    // state, ref, querystring hooks

    // form hooks

    // query hooks

    // calculated values

    // effects

    // handlers
    return <div>{example}</div>;
}
```

[컴포넌트 export]

```tsx
export { Component };
```
[코드에는 모두 영문을 사용한다. 단, 주석은 한글이 허용된다.]
- 모든 코드에는 문자열에 들어가는 내용에도 무조건 영문으로 작성한다.
- 한글은 절대 사용하지 않는다.

[주석 컨벤션]
- 주석의 종류는 다음과 같다.
  - NOTE:
    - 주목 필요한 부분
    - 그냥 주석과 차이는 없지만 하이라이트 시켜서 개발자가 한번 더 읽어 보도록 하기 위한 용도
  - TODO:
    - 아직 구현되지 않았지만 언젠가 해야 하는 일
  - FIXME:
    - 빠른 시간 내에 해야 하는 일
    - 어떤 목적(최적화, 리팩토링 등)을 달성하기 위해 코드를 고칠 필요가 있음
  - HACK:
    - 주석이 없다면 왜 이렇게 코딩했을지 알 수 없는 예상치 못한 방법을 사용함
  - OPTIMIZE:
    - 최적화가 필요한 부분
  - BUG:
    - 버그가 있는 코드
  - HARDCODING:
    - 하드코딩된 값
